# Generated by Django 2.2.9 on 2020-02-03 15:26

import controlled_vocabulary.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geonames_place', '0004_change_meta_options_on_country'),
        ('utils', '0001_initial'),
        ('controlled_vocabulary', '0004_remove_controlledvocabulary_test'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(help_text='The agent name.', max_length=128)),
                ('based_near', models.ManyToManyField(blank=True, help_text='A location that something is based near, for some broadly human notion of near.', to='geonames_place.Place')),
                ('page', controlled_vocabulary.models.ControlledTermsField(blank=True, help_text='A page or document about this Agent.', related_name='_agent_page_+', to='controlled_vocabulary.ControlledTerm', vocabularies=['viaf'])),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_agents.agent_set+', to='contenttypes.ContentType')),
                ('roles', controlled_vocabulary.models.ControlledTermsField(blank=True, help_text='Roles performed by this Agent.', related_name='_agent_roles_+', to='controlled_vocabulary.ControlledTerm', vocabularies=['wikidata'])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('agent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='agents.Agent')),
                ('given_name', models.CharField(blank=True, help_text='The given name of some person.', max_length=64, null=True)),
                ('family_name', models.CharField(blank=True, help_text='The family name of some person.', max_length=64, null=True)),
                ('gender', models.CharField(blank=True, choices=[('f', 'female'), ('m', 'male'), ('u', 'unknown')], help_text='The gender of this Person.', max_length=1, null=True)),
                ('date_birth', models.OneToOneField(blank=True, help_text='The date of birth of this Person.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person_birth', to='utils.Date')),
                ('date_death', models.OneToOneField(blank=True, help_text='The date of death of this Person.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person_death', to='utils.Date')),
                ('knows', models.ManyToManyField(blank=True, help_text='A person known by this person (indicating some level of reciprocated interaction between the parties).', related_name='_person_knows_+', to='agents.Person')),
                ('languages', controlled_vocabulary.models.ControlledTermsField(blank=True, help_text='The languages this person spoke or worked with.', related_name='_person_languages_+', to='controlled_vocabulary.ControlledTerm', vocabularies=['iso639-2'])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('agents.agent',),
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('agent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='agents.Agent')),
                ('members', models.ManyToManyField(blank=True, help_text='Members of this organisation', related_name='member_of', to='agents.Agent')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('agents.agent',),
        ),
    ]
